#!/usr/bin/env bash

# Listener for volume changes, to report to eww.

# Requires: PipeWire / Wireplumber, gawk
# Usage: volume

get_time_ms() {
  date -u +%s%3N
}

get_volume() {
  echo $(wpctl get-volume @DEFAULT_AUDIO_"$1"@ | awk '{print int($2*100)}')
}
get_mute() {
  wpctl get-volume @DEFAULT_AUDIO_"$1"@ | grep -i muted
  echo $?
}
set_mute() {
  echo $(wpctl set-mute @DEFAULT_AUDIO_"$1"@ toggle)
}
set_volume() {
  wpctl set-volume @DEFAULT_AUDIO_"$1"@ "$2%"
}

cache_dir="$XDG_CACHE_HOME/eww"
cache_file="$cache_dir/volume"

gen_output() {
  # initial values
  is_audio_muted="1"
  is_mic_muted="1"

  # get values from cache file
  if [ -f "$cache_file" ]; then
    vols="$(cat "$cache_file")"
    sink_volume="$(cut -d ':' -f1 <<<"$vols")"
    mic_volume="$(cut -d ':' -f2 <<<"$vols")"
  else
    sink_volume="50"
    mic_volume="50"
  fi

  if [ "$1" != "init" ]; then
    is_audio_muted=$(get_mute "SINK")
    is_mic_muted=$(get_mute "SOURCE")

    # check volumes for error codes below 0
    # else just use cache values or default
    new_sink_volume=$(get_volume "SINK")
    if [ ! $new_sink_volume -lt 0 ]; then
      sink_volume="$new_sink_volume"
    fi
    new_mic_volume=$(get_volume "SOURCE")
    if [ ! $new_mic_volume -lt 0 ]; then
      mic_volume="$new_mic_volume"
    fi

    # write to cache file
    if [ ! -d "$cache_dir" ]; then
      mkdir -p "$cache_dir"
    fi
    if [ ! -f "$cache_file" ]; then
      touch "$cache_file"
      echo "$sink_volume:$mic_volume" >> "$cache_file"
    fi
    echo "$sink_volume:$mic_volume" > "$cache_file"
  fi

  if [ "$is_audio_muted" = 1 ]; then
  	audio_icon="󰋋" 
  else
    audio_icon="󰟎"
  fi
  
  if [ "$is_mic_muted" = 1 ]; then
  	mic_icon="󰍬" 
  else
    mic_icon="󰍭"
  fi

  echo '{"audio": "'"$sink_volume"'", "audio_icon": "'"$audio_icon"'", "mic": "'"$mic_volume"'", "mic_icon": "'"$mic_icon"'"}'
}

last_time=$(get_time_ms)
vol_icons=("󰕿" "󰖀" "󰕾")

if [ "$1" = "mute" ]; then
  if [ "$2" != "SOURCE" ] && [ "$2" != "SINK" ]; then
    exit 1
  fi
  set_mute "$2"
elif [ "$1" = "set" ]; then
  if [ "$2" != "SOURCE" ] && [ "$2" != "SINK" ]; then
    exit 1
  fi
  if [ "$3" != '' ]; then
    set_volume "$2" "$3"
  fi
else
  # initial values
  gen_output "init"
  
  pactl subscribe | grep --line-buffered "sink" | while read -r data ; do
    current_time=$(get_time_ms)
    delta=$(( $current_time - $last_time )) 
    # 100 millisecond debounce
    if [[ "${delta}" -gt 50 ]] ; then
      gen_output
      # reset debounce timer
      last_time=$(get_time_ms)
    fi
  done
fi
